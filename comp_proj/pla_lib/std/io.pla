tlaturef "pla_lib/w64/kernel32.pla"a;

namespace std {
	variable const con_handle_name := "CON"w;

	readonly con_in_buf_size := 256'u64;
	struct con_in_buf_t;
	readonly con_in_buf_hdr_t := struct {
		next : * con_in_buf_t
	};
	struct con_in_buf_t {
		hdr : con_in_buf_hdr_t,
		data : [con_in_buf_size]u16
	};
	readonly con_in_t := struct {
		handle : w64::handle_t,

		rd_buf : * con_in_buf_t,
		rd_buf_cap : u64,
		rd_buf_cur : u64,

		ug_buf : * con_in_buf_t,
		ug_buf_size : u64
	};

	variable con_in_rd0 : con_in_buf_t;
	variable con_in_rd1 : con_in_buf_t;
	variable con_in_ug : con_in_buf_t;
	variable con_in : con_in_t;

	readonly con_out_t := struct {
		handle : w64::handle_t
	};

	variable con_out : con_out_t;

	function init_con_io : $() -> void {
		con_in.handle = w64::create_file_w(con_handle_name.data, 0x8000_0000'u32, 0'u32, nullof[* void], 3'u32, 0'u32, nullof[* void]);

		if con_in.handle == %[* void]-1's64 {
			w64::exit_process(%[u32]-1's32);
		}

		con_out.handle = w64::create_file_w(con_handle_name.data, 0x4000_0000'u32, 0'u32, nullof[* void], 3'u32, 0'u32, nullof[* void]);

		if con_out.handle == %[* void]-1's64 {
			w64::exit_process(%[u32]-1's32);
		}

		con_in_rd0.hdr.next = &con_in_rd1;
		con_in_rd1.hdr.next = &con_in_rd0;
		con_in.rd_buf = &con_in_rd0;

		con_in.ug_buf = &con_in_ug;

		return;
	}

	function read_con_ch_raw : $() -> u16 {
		variable ch : u16, rd_buf := con_in.rd_buf;

		if con_in.rd_buf_cur < con_in.rd_buf_cap {
			ch = rd_buf!data[con_in.rd_buf_cur];

			con_in.rd_buf_cur = con_in.rd_buf_cur + 1'u64;

			return ch;
		}

		if con_in.rd_buf_cur == con_in_buf_size {
			rd_buf = rd_buf!hdr.next;

			con_in.rd_buf = rd_buf;
			con_in.rd_buf_cap = 0'u64;
			con_in.rd_buf_cur = 0'u64;
		}
		
		variable read : u32;

		if w64::read_console_w(con_in.handle, %[* void](&rd_buf!data[con_in.rd_buf_cap]), %[u32](con_in_buf_size - con_in.rd_buf_cap), &read, nullof[* void]) == 0's32 || read < 1'u32 {
			return 0xFFFF'u16; 
		}

		con_in.rd_buf_cap = con_in.rd_buf_cap + %[u64]read;

		ch = rd_buf!data[con_in.rd_buf_cur];

		con_in.rd_buf_cur = con_in.rd_buf_cur + 1'u64;

		return ch;
	}

	function read_con_ch : $() -> u16 {
		variable ug_buf := con_in.ug_buf;

		if con_in.ug_buf_size > 0'u64 {
			con_in.ug_buf_size = con_in.ug_buf_size - 1'u64;
			return ug_buf!data[con_in.ug_buf_size];
		}

		variable ch := read_con_ch_raw();

		if ch == 13'u16 {
			ch = read_con_ch_raw();

			if ch != 10'u16 {
				ug_buf!data[con_in.ug_buf_size] = ch;
				con_in.ug_buf_size = con_in.ug_buf_size + 1'u64;
				return 13'u16;
			}
		}

		return ch;
	}
	function unget_con_ch : $(ch : u16) -> void {
		if con_in.ug_buf_size < con_in_buf_size {
			con_in.ug_buf!data[con_in.ug_buf_size] = ch;
			con_in.ug_buf_size = con_in.ug_buf_size + 1'u64;
		}

		return;
	}

	function is_ws_ch : $(ch : u16) -> bool {
		if ch == 9'u16 || ch == 10'u16 || ch == 13'u16 || ch == 32'u16 {
			return true;
		}
		else {
			return false;
		}
	}
	function get_upper_lim : $(size_bytes : u8, sign : bool, neg : bool, out : * u64) -> bool {
		if size_bytes != 1'u8
			&& size_bytes != 2'u8
			&& size_bytes != 4'u8
			&& size_bytes != 8'u8 {
			return false;
		}
		
		variable upper_lim := -1'u64 >> %[u64](64'u8 - (size_bytes << 3'u8));

		if sign {
			upper_lim = upper_lim >> 1'u64;

			if neg {
				upper_lim = upper_lim + 1'u64;
			}
		}

		out! = upper_lim;

		return true;
	}
	function write_int_val : $(val : u64, size_bytes : u8, out : * void) {
		if size_bytes == 1'u8 {
			(%[* u8]out)! = %[u8]val;
		}
		else if size_bytes == 2'u8 {
			(%[* u16]out)! = %[u16]val;
		}
		else if size_bytes == 4'u8 {
			(%[* u32]out)! = %[u32]val;
		}
		else if size_bytes == 8'u8 {
			(%[* u64]out)! = %[u64]val;
		}

		return;
	}
	function read_con_dec : $(size_bytes : u8, sign : bool, out : * void) -> bool {
		variable ch := read_con_ch();

		while is_ws_ch(ch) {
			ch = read_con_ch();
		}

		variable neg := false;

		if ch == 43'u16 {
			ch = read_con_ch();
		}
		else if ch == 45'u16 {
			neg = true;
			ch = read_con_ch();
		}

		variable digits_read := 0'u64,
			val := 0'u64,
			radix := 10'u64,
			pre_ovf_val := (-1'u64) / radix,
			pre_ovf_digit := (-1'u64) % radix;

		while true {
			if ch < 48'u16 || ch > 57'u16 {
				break;
			}

			variable digit := %[u64](ch - 48'u16);

			if val > pre_ovf_val || val == pre_ovf_val && digit > pre_ovf_digit {
				unget_con_ch(ch);
				return false;
			}

			val = val * radix + digit;

			ch = read_con_ch();

			digits_read = digits_read + 1'u64;
		}

		unget_con_ch(ch);

		if digits_read == 0'u64 {
			return false;
		}

		variable upper_lim : u64;

		if !get_upper_lim(size_bytes, sign, neg, &upper_lim) || val > upper_lim {
			return false;
		}

		if neg {
			val = -val;
		}

		write_int_val(val, size_bytes, out);

		return true;
	}

	function write_con_ch : $(ch : u16) -> void {
		variable written : u32;

		w64::write_console_w(con_out.handle, %[const * void]&ch, 1'u32, &written, nullof[* void]);

		return;
	}

	function get_dec_val : $(val_ptr : * void, size_bytes : u8, sign : bool, out_val : * u64, out_neg : * bool) -> bool {
		variable neg := false;

		if size_bytes == 1'u8 {
			if sign {
				variable val := (%[* s8]val_ptr)!;

				if val < 0's8 {
					out_val! = %[u64]-val;
					neg = true;
				}
				else {
					out_val! = %[u64]val;
				}
			}
			else {
				out_val! = %[u64](%[* u8]val_ptr)!;
			}
		}
		else if size_bytes == 2'u8 {
			if sign {
				variable val := (%[* s16]val_ptr)!;

				if val < 0's16 {
					out_val! = %[u64]-val;
					neg = true;
				}
				else {
					out_val! = %[u64]val;
				}
			}
			else {
				out_val! = %[u64](%[* u16]val_ptr)!;
			}
		}
		else if size_bytes == 4'u8 {
			if sign {
				variable val := (%[* s32]val_ptr)!;

				if val < 0's32 {
					out_val! = %[u64]-val;
					neg = true;
				}
				else {
					out_val! = %[u64]val;
				}
			}
			else {
				out_val! = %[u64](%[* u32]val_ptr)!;
			}
		}
		else if size_bytes == 8'u8 {
			if sign {
				variable val := (%[* s64]val_ptr)!;

				if val < 0's64 {
					out_val! = %[u64]-val;
					neg = true;
				}
				else {
					out_val! = %[u64]val;
				}
			}
			else {
				out_val! = %[u64](%[* u64]val_ptr)!;
			}
		}
		else {
			return false;
		}

		out_neg! = neg;

		return true;
	}
	function write_con_dec : $(val_ptr : * void, size_bytes : u8, sign : bool) -> bool {
		variable val : u64, neg : bool;

		if !get_dec_val(val_ptr, size_bytes, sign, &val, &neg) {
			return false;
		}

		variable buf : [32'u64]u16, i := 0'u64;

		do {
			buf[i] = %[u16](val % 10'u64) + 48'u16;
			i = i + 1'u64;
			val = val / 10'u64;
		} while val > 0'u64;

		if neg {
			buf[i] = 45'u16;
			i = i + 1'u64;
		}

		while i > 0'u64 {
			i = i - 1'u64;
			write_con_ch(buf[i]);
		}

		return true;
	}
}